/**
 * \file cbessel.hpp
 *
 * \brief This is a C++ library for Bessel functions of complex argument and
 * real order, intended as a replacement for complex_bessel library which
 * uses the Fortran code by Donald E. Amos.
 *
 * The same theoretical basis is used, as explained in the two papers by
 * Amos (1983). This code includes optimizations for order 0 and 1, making it
 * slightly faster than the Fortran library. The routines below will throw
 * exceptions if CBESSEL_EXCEPT is defined (by default it is not defined,
 * the respective line in the CPP file is commented out).
 *
 * The following exceptions are thrown:
 *  - std::overflow_error in the case of overflow
 *  - std::underflow_error in the case of underflow (the result is 0)
 *  - std::invalid_argument in the case of undefined result (NAN)
 *  - std::length_error in the case of convergence failure
 *  - std::domain_error in the case of invalid parameter value
 *
 * Throwing exceptions is more informative but slightly slower.
 * Convergence problems should not happen in practice.
 *
 * (c) 2023 Luka MarohniÄ‡
 */

#ifndef CBESSEL_HPP
#define CBESSEL_HPP

#include <complex>
#include <Eigen/Dense>
#include <iostream>
#include <mutex>

using namespace std;

#define CBESSEL_MAXITER 1000
//#define CBESSEL_EXCEPT 1

namespace complex_bessel {

    /**
     * typedef for Real precision real type
     */
    typedef double Real;

    /**
     * typedef for Real precision complex type
     */
    typedef complex<Real> Cplx;

    /**
     * workspace for Olver expansions for large order
     */
    typedef struct olver_data {
        bool is_valid;
        Cplx S1,S2,xi,phi; // xi = 2/3*zeta^(3/2)
        olver_data();
    } OlverData;

    /* precomputed data */
    const Real D[10] = {
       -0.77822634399050712540469014052832e-11,0.11812745704870201445881285719317e-8,
       -0.61160951044814158178624971108758e-8,-0.11330272319816958823741296185618e-5,
        0.20134854780788238655689391422764e-4, 0.21524167411495097281572996305591e-3,
       -0.72189432466630995423950103404449e-2, 0.42197734555544336748208301289190e-1,
        0.42002635034095235529003934875432e-1,-0.57721566490153286060651209008240
    };
    const Real fg_coef[28] = {
        0.16666666666666666666666666666667,    0.55555555555555555555555555555555e-2,
        0.77160493827160493827160493827160e-4, 0.58454919566030677141788252899364e-6,
        0.27835675983824131972280120428268e-8, 0.90966261385046182915948105974733e-11,
        0.21658633663106234027606691898746e-13,0.83333333333333333333333333333333e-1,
        0.19841269841269841269841269841270e-2, 0.22045855379188712522045855379189e-4,
        0.14131958576403020847465291909736e-6, 0.58883160735012586864438716290567e-9,
        0.17217298460529996159192607102505e-11,0.37266879784696961383533781607154e-14,
        0.66666666666666666666666666666666e-1, 0.13888888888888888888888888888889e-2,
        0.14029180695847362514029180695847e-4, 0.83507027951472395916840361284805e-7,
        0.32747854098616625849741318150904e-9, 0.90966261385046182915948105974732e-12,
        0.18833594489657594806614514694561e-14,0.33333333333333333333333333333333,
        0.13888888888888888888888888888889e-1, 0.22045855379188712522045855379189e-3,
        0.18371546149323927101704879482657e-5, 0.94213057176020138983101946064908e-8,
        0.32712867075006992702465953494760e-10,0.81987135526333315043774319535738e-13
    };
    const Real g_coef[27] = {
        0.28218002735510577802732856336527e-2, 0.29551595693827814810411824275444e-2, 0.31007571189141127493698155423136e-2,
        0.32603029704905452472689728204689e-2, 0.34358352570203194319947068346683e-2, 0.36298018314290030475246407322153e-2,
        0.38451673228631979715111955419110e-2, 0.40855552853676180590258925703096e-2, 0.43554395320217693480267286350040e-2,
        0.46604055683625348212215275828782e-2, 0.50075137925395733265965217637280e-2, 0.54058134958992978258966706195442e-2,
        0.58670855032034623457257658591866e-2, 0.64069405257066798145061932631493e-2, 0.70464873472844527966685022425184e-2,
        0.78149449106480937308394829895925e-2, 0.87538795803476454843692547489246e-2, 0.99243701063652852104195569133095e-2,
        0.11419737767544968453057612632307e-1, 0.13389564389687457919491118658434e-1, 0.16088515817830306344627357386996e-1,
        0.19985518906371944797713031471726e-1, 0.26040916906094147125026017414173e-1, 0.36547709820363185850985355314301e-1,
        0.58496334459404825507049063909346e-1, 0.12599210498948731647672106072782,    1.2599210498948731647672106072782
    };
    const Real xi_coef[27] = {
        0.18867924528301886792452830188679e-1, 0.19607843137254901960784313725490e-1, 0.20408163265306122448979591836735e-1,
        0.21276595744680851063829787234043e-1, 0.22222222222222222222222222222222e-1, 0.23255813953488372093023255813953e-1,
        0.24390243902439024390243902439024e-1, 0.25641025641025641025641025641026e-1, 0.27027027027027027027027027027027e-1,
        0.28571428571428571428571428571428e-1, 0.30303030303030303030303030303030e-1, 0.32258064516129032258064516129032e-1,
        0.34482758620689655172413793103448e-1, 0.37037037037037037037037037037037e-1, 0.40000000000000000000000000000000e-1,
        0.43478260869565217391304347826087e-1, 0.47619047619047619047619047619047e-1, 0.52631578947368421052631578947368e-1,
        0.58823529411764705882352941176471e-1, 0.66666666666666666666666666666666e-1, 0.76923076923076923076923076923077e-1,
        0.90909090909090909090909090909091e-1, 0.11111111111111111111111111111111,    0.14285714285714285714285714285714,
        0.2,                                   0.33333333333333333333333333333333,    0.0
    };
    const Real U_C[78] = {
        1.0,                                  -0.20833333333333333333333333333333,    0.125,
        0.33420138888888888888888888888889,   -0.40104166666666666666666666666666,    0.703125e-1,
       -1.0258125964506172839506172839506,     1.8464626736111111111111111111111,    -0.8912109375,
        0.732421875e-1,                        4.6695844234262474279835390946501,    -0.11207002616222993827160493827160e2,
        8.78912353515625,                     -2.3640869140625,                       0.112152099609375,
       -0.28212072558200244877400548696844e2,  0.84636217674600734632201646090534e2, -0.91818241543240017361111111111110e2,
        0.42534998745388454861111111111110e2, -7.3687943594796316964285714285714,     0.227108001708984375,
        0.21257013003921712286096941205608e3, -0.76525246814118164229948988340191e3,  0.10599904525279998779296875e4,
       -0.69957962737613254123263888888887e3,  0.21819051174421159047929067460317e3, -0.26491430486951555524553571428571e2,
        0.5725014209747314453125,             -0.19194576623184069963100630838636e4,  0.80617221817373093845022649522270e4,
       -0.13586550006434137438550407503858e5,  0.11655393336864533247771086516203e5, -0.53056469786134031083848741319443e4,
        0.12009029132163524627685546875e4,    -0.10809091978839465550013950892857e3,  1.7277275025844573974609375,
        0.20204291330966148643451236940043e5, -0.96980598388637513488565937312207e5,  0.19254700123253153235905782021939e6,
       -0.20340017728041553427816581987713e6,  0.12220046498301745978770432648835e6, -0.41192654968897551298141479492187e5,
        0.71095143024893637214388166155132e4, -0.49391530477308801242283412388392e3,  6.0740420012734830379486083984374,
       -0.24291918790055133345853177006153e6,  0.13117636146629772006760715583323e7, -0.29980159185381067500913462030544e7,
        0.37632712976564039964021056222762e7, -0.28135632265865341107078683556188e7,  0.12683652733216247816259662310282e7,
       -0.33164517248456357783150105249313e6,  0.45218768981362726273281233651296e5, -0.24998304818112096241251988844438e4,
        0.24380529699556063860654830932616e2,  0.32844698530720378211372316410403e7, -0.19706819118432226926823389846242e8,
        0.50952602492664642206381821980497e8, -0.74105148211532657748335620964413e8,  0.66344512274729026664798798454327e8,
       -0.37567176660763351308163197964061e8,  0.13288767166421818329437411631699e8, -0.27856181280864546889594445625940e7,
        0.30818640461266239848039078427709e6, -0.13886089753717040531972253864462e5,  0.11001714026924673817120492458343e3,
       -0.49329253664509961972761831275473e8,  0.32557307418576574902022808641812e9, -0.93946235968157840254624430092036e9,
        0.15535968995705800561581210443879e10,-0.16210805521083370752481758826367e10, 0.11068428168230144682596666690962e10,
       -0.49588978427503030925463624537424e9,  0.14206290779753309518565327851791e9, -0.24474062725738728467813008156015e8,
        0.22437681779224494292307377802397e7, -0.84005433603024085288678281256681e5,  0.55133589612202058560797013342379e3
    };
    const Real lambda_coef[12] = {
        1.0,                                   0.10416666666666666666666666666667,    0.83550347222222222222222222222222e-1,
        0.12822657455632716049382716049383,    0.29184902646414046424897119341564,    0.88162726744375765241876714677641,
        3.3214082818627675447026470633764,     0.14995762986862554658672367842684e2,  0.78923013011586518138481394297045e2,
        0.47445153886826432316119486340145e3,  0.32074900908906619347043277744536e4,  0.24086549640874004869512612927478e5
    };
    const Real mu_coef[12] = {
       -1.0,                                   0.14583333333333333333333333333333,    0.98741319444444444444444444444444e-1,
        0.14331205391589506172839506172839,    0.31722720267841354809670781893004,    0.94242914795712024913730281207133,
        3.5112030408263542615427983241407,     0.15727263620368045129827117493547e2,  0.82281439097185944442246560011813e2,
        0.49235537052367052403520221673735e3,  0.33162185685479725087621015973164e4,  0.24827674245208589634728385632939e5
    };
    const Real a_coef[135] = {
       -0.16305767447865746312079440732310e-3,-0.18135869221097068720365015744785e-3,-0.20044391109497149811631779997710e-3,
       -0.22004826004542284821273001252561e-3,-0.23978401439648034204644056142302e-3,-0.25910392846703170884152708532457e-3,
       -0.27725565558293477765515932638578e-3,-0.29322647061455733150858004134460e-3,-0.30567803846632437428606654614710e-3,
       -0.31287255875806716690707735327141e-3,-0.31259471264382012432567324424727e-3,-0.30207951415545692189623948299629e-3,
       -0.27796615069490665528084461951383e-3,-0.23631487360587298676625456673139e-3,-0.17275195286917299501958874046695e-3,
       -0.82852022023213704095778729489894e-4, 0.37066305766490415156104867629216e-4, 0.18846453551445559928134299224921e-3,
        0.36805931997144315679095573742600e-3, 0.56383232975698091510844296248695e-3, 0.74936958537899064058937530949106e-3,
        0.87733523595823551072895694681526e-3, 0.87596496995118593226989815080448e-3, 0.66008814754201414296469075446947e-3,
        0.18306773598003902064368428290729e-3,-0.42997663305887191646810490788372e-3,-0.69114139728829416761374506757465e-3,
        0.53106377380288016965990945253594e-4, 0.55280437558585257692411414466105e-4, 0.57251582377759305333029628250726e-4,
        0.58919965734469849978685824584803e-4, 0.60157789453946038753089337704870e-4, 0.60802390778843649660463501857631e-4,
        0.60647852757842174231736236811172e-4, 0.59434982039310405159561161190756e-4, 0.56839620854581526598317658122447e-4,
        0.52459529495911404961643516423587e-4, 0.45800612449018875175097032083829e-4, 0.36264274585679395679094570503209e-4,
        0.23139544314828679960310229481627e-4, 0.56069048230460226731645249910139e-5,-0.17233430236696226746386149499010e-4,
       -0.46286073058811645833504325186125e-4,-0.82298287282020836506600717903698e-4,-0.12554406306069034785490836360500e-3,
       -0.17524528034084674948581332124166e-3,-0.22856408261914137420536760144879e-3,-0.27895027379132338665887799112629e-3,
       -0.31368011524757631598807939796967e-3,-0.31091625602736156801420753007171e-3,-0.23859823060300590265230469710623e-3,
       -0.63793850631886240771706039514259e-4, 0.20247195276181616738606928763729e-3, 0.37819419920177291402661228437400e-3,
       -0.10880596251059288002655623137135e-4,-0.10201141879801644092666478412559e-4,-0.93130471509356123194066867026632e-5,
       -0.81726937967865792324232957854805e-5,-0.67273929609124828701064251326590e-5,-0.49134686709848591001231157007382e-5,
       -0.26539676969793911580155569707613e-5, 0.14404004981425181705858296457703e-6, 0.35925748581935158277146073682007e-5,
        0.78262086674449666142225483781119e-5, 0.13005667479396320337364130471038e-4, 0.19321093824793925314935625392241e-4,
        0.26993971497922490105423037146330e-4, 0.36275751200534429669558338530450e-4, 0.47439429929050879906954478613466e-4,
        0.60757033496519735375509144345255e-4, 0.76449841925089825758911430916592e-4, 0.94586909303468811113319491582362e-4,
        0.11488669202982512817307087368364e-3, 0.13633917097744512017972257917339e-3, 0.15650142760859470446226638167006e-3,
        0.17022258768359256906759118358560e-3, 0.16747110669971226946798233962277e-3, 0.13019865577324269262404817295490e-3,
        0.30446550359493640984557547809681e-4,-0.15616126394515941639138744067672e-3,-0.35421197145774384077112575919506e-3,
       -0.15017941298011948227200639368501e-4,-0.16651933002139380639779740767730e-4,-0.18481621762766608450677948904027e-4,
       -0.20535275310648060449939771845813e-4,-0.22845929716472455539093305882736e-4,-0.25452272063487056593084649237650e-4,
       -0.28399679390417481098132891850017e-4,-0.31741425660902248010878044280628e-4,-0.35540053297204249773215783032345e-4,
       -0.39868872771759886358416193566252e-4,-0.44813486800888278572569826818809e-4,-0.50473104430356162801158651148118e-4,
       -0.56961156600936904805190651899499e-4,-0.64404235772101628316004065211830e-4,-0.72937434815522121128042909531065e-4,
       -0.82692304558819327395907636905815e-4,-0.93769954989119449192203265284783e-4,-0.10618431920797401996427365800136e-3,
       -0.11974497568425405128661594303757e-3,-0.13381550386749136668731254680770e-3,-0.14680975664646554927600206825790e-3,
       -0.15512192491809622298489674331520e-3,-0.15080355805304876165913644261662e-3,-0.11644493167204863969339740154889e-3,
       -0.14198627355669119743170416071155e-4, 0.23224174518292165350988880400645e-3, 0.69373554135458897363659268421173e-3,
        0.76698134535920738822981735920026e-4, 0.80349754840779115118527792686343e-4, 0.84296310571570022307310425969687e-4,
        0.88571085247871171841465714321604e-4, 0.93212051724950325556340576094768e-4, 0.98262607836936344827055283763022e-4,
        0.10377241042299282299872357661726e-3, 0.10979829837271336857688565720615e-3, 0.11640527147473790200435574891628e-3,
        0.12366744559825326113590685697667e-3, 0.13166881654592280577658878987589e-3, 0.14050349739126979402492618250250e-3,
        0.15027477416090813375156189912292e-3, 0.16109170592901575165122291528870e-3, 0.17306077591787649317198781772621e-3,
        0.18626763663754517240298521442132e-3, 0.20073885876275235483926619901228e-3, 0.21636248571236508187456112118019e-3,
        0.23272104008323209792086856602634e-3, 0.24873043734465560936669729402824e-3, 0.26182429706150094464910024307627e-3,
        0.26599558934625477989234975282983e-3, 0.24669137274179290986013675089305e-3, 0.16592768783244973721164197354674e-3,
       -0.88489288489288489288489288489289e-4,-0.92207792207792207792207792207792e-3,-0.44444444444444444444444444444444e-2
    };
    const Real b_coef[162] = {
       -0.29164736331209081312564210294074e-3,-0.29655733423934810879622374237259e-3,-0.29743596217631660869367680903513e-3,
       -0.29308156319286116237511946609955e-3,-0.28205046986759867560740874825563e-3,-0.26262881146466885273433555202760e-3,
       -0.23281145037693741085149902105840e-3,-0.19029618798961406510617601585087e-3,-0.13250618677298261547638731412910e-3,
       -0.56660746163525207952422550452146e-4, 0.40074955527061428982835687182009e-4, 0.16031569459472150302855817950408e-3,
        0.30599192635878950067137210273048e-3, 0.47760387285658225730723702803648e-3, 0.67307320816566561871092726136189e-3,
        0.88604744041979162741073657371436e-3, 0.11035159737564269365727794817032e-2, 0.13026826128565718105351973603480e-2,
        0.14473233983061758988938179940682e-2, 0.14845749525944917918749472005490e-2, 0.13446744970154036199777513747912e-2,
        0.94926611717688106192685270229217e-3, 0.23907947525692728428863607470604e-3,-0.76220459635400983194962682139792e-3,
       -0.18342266354985679819552836890436e-2,-0.24340296293804253831049911736060e-2,-0.18018219196388569702524280320237e-2,
        0.24892338100459515560526581872202e-4, 0.20822362948246684657072244654427e-4, 0.15647778542887261955332128608593e-4,
        0.91642647412277884783442663217152e-5, 0.11369868667510028924115784585557e-5,-0.87010609684976705736826150188841e-5,
       -0.20648976103555175688209716834308e-4,-0.35034775051190052035399067932306e-4,-0.52207002889563380288638039297622e-4,
       -0.72517832771442533423559617854044e-4,-0.96292614771764418897765393843711e-4,-0.12377824076187362998730055939550e-3,
       -0.15505891859909386975702662600112e-3,-0.18992261185456235570251960860327e-3,-0.22765421412281952702942643463012e-3,
       -0.26672272304761282054104716516121e-3,-0.30432112478903980872943496466563e-3,-0.33571563577504875679729258374587e-3,
       -0.35338247091603771209147500853652e-3,-0.34599812683265634750756435450956e-3,-0.29760364659455453485814225074593e-3,
       -0.18790600363697155771061250410365e-3, 0.38473767287936609521649115189250e-5, 0.28599815419430414707463189182072e-3,
        0.62261486257313506617210360556181e-3, 0.87279080514619397591397616938255e-3, 0.73646581057257844419684316936484e-3,
        0.14554742826152400369612683952719e-4, 0.17009198463641262268177573311834e-4, 0.19789305666402163624023792707490e-4,
        0.22936363369099815190267234085966e-4, 0.26495611995051603864523941960132e-4, 0.30515799503434665897155579761281e-4,
        0.35048173003132808110125259917052e-4, 0.40144551389148680793708202648792e-4, 0.45853948516536064567575256645502e-4,
        0.52216930882697556726831460453086e-4, 0.59256454732319470361975109244770e-4, 0.66963252197573087228394143200235e-4,
        0.75272799134913406213966701410822e-4, 0.84029313301608997792791428560670e-4, 0.92929839659336389557003160201353e-4,
        0.10143795159766197259744643803268e-3, 0.10865163484877426783725834040100e-3, 0.11310364210848138896645320450327e-3,
        0.11246677526220415776689563795901e-3, 0.10313823670827219976057867990913e-3, 0.79709268407567492367714140908216e-4,
        0.34457129429496750303162142309969e-4,-0.42577810128543520436520347161882e-4,-0.16110501611996228189965892548228e-3,
       -0.32039022806703760345411634902401e-3,-0.47786456714732148726088405941268e-3,-0.47461779655995980754441833052401e-3,
       -0.19820063888529492723804307743487e-4,-0.21147965676891297111202789169595e-4,-0.22582350951834603251449233409648e-4,
       -0.24130835676128020048061636712543e-4,-0.25800617466688371345624466839686e-4,-0.27597891482833575859843395280853e-4,
       -0.29526956175080731515819620104259e-4,-0.31588856077210962111736489489196e-4,-0.33779330612336741747859414100601e-4,
       -0.36085716753541050065863558493230e-4,-0.38482263860322127360238695087209e-4,-0.40923019315775036382717157737122e-4,
       -0.43330964451126603594760934484892e-4,-0.45581305813862845170501667494642e-4,-0.47475562089008663848135925928288e-4,
       -0.48701003118673506908553802132192e-4,-0.48766544741378735197688695324695e-4,-0.46900488937914102934457810642110e-4,
       -0.41886186169669336451328627892555e-4,-0.31797241335042713537516852511660e-4,-0.13574499634326913612610395663071e-4,
        0.17625868306999139680704259467086e-4, 0.69327110565704359773882466147305e-4, 0.15246815619844660150881198146978e-3,
        0.27952065399202058881025943337723e-3, 0.44793258155238464640564614485062e-3, 0.55221307672129279005986982501080e-3,
        0.19591345014117924393561322125875e-4, 0.20116524199708166564270229271571e-4, 0.20638874978217073674111266439938e-4,
        0.21150764925622084338363602077484e-4, 0.21641842744810390520666189825875e-4, 0.22098101536199142935315249568751e-4,
        0.22500588110529241837816367896144e-4, 0.22823607372034872158766487495375e-4, 0.23032197608090914387998647501280e-4,
        0.23078538981117781675851116621588e-4, 0.22896778381471262867210587803497e-4, 0.22395465923245651411764282492509e-4,
        0.21446326379082263871554093590305e-4, 0.19867297884213378041594479893443e-4, 0.17396412547292626068259847326273e-4,
        0.13650700926214739094591893951242e-4, 0.80599616541427357065762654936331e-5,-0.24289260857573038860698388336231e-6,
       -0.12608973598023004671772761542060e-4,-0.31203892907609834030874055838930e-4,-0.59614195304645789476286284303015e-4,
       -0.10400855046081643397831523069418e-3,-0.17546399697078282820531686814719e-3,-0.29482213851274602513185100549750e-3,
       -0.50291654957203461354020960645354e-3,-0.87820470954638932839154179063920e-3,-0.14928295321342917205007340333366e-2,
        0.70990630063415348115870558051045e-4, 0.75900226964621933905416032514839e-4, 0.81346626216280146664971179182542e-4,
        0.87413054575383443683303226618903e-4, 0.94199822420423750872419384517656e-4, 0.10182877074056725765729253072988e-3,
        0.11044914450459939247401564721758e-3, 0.12024544494930288371565371288594e-3, 0.13144806811996537900758522870666e-3,
        0.14434793019733398621012664758494e-3, 0.15931689966182108118588356273978e-3, 0.17683685501971800374456069461436e-3,
        0.19754183803306252402068932315418e-3, 0.22228058079888332665663421006211e-3, 0.25221161554957328357875228204320e-3,
        0.28895214849575151669235935385144e-3, 0.33481888931829766411195842563706e-3, 0.39323283546291663799066153634529e-3,
        0.46943100760648153296533950525080e-3, 0.57178728178970487168319645188412e-3, 0.71443042172728735736186199506993e-3,
        0.92287887657293831079181693201455e-3, 0.12475311058919920157895009989263e-2, 0.18009660676105394060665593609959e-2,
        0.28850140223113277910192074676657e-2, 0.55996491106438807322987138101255e-2, 0.17998872141355330925245865818261e-1
    };

    /* some constants */
    const Real eps      =   numeric_limits<Real>::epsilon();
#ifndef CBESSEL_EXCEPT
    const Real infty    =   numeric_limits<Real>::infinity();
#endif
    const Real airy_C1  =   0.35502805388781723926006318600418;
    const Real airy_C2  =   0.25881940379280679840518356018921;
    const Real f13      =   1/3.0;
    const Real f23      =   2/3.0;
    const Real f32      =   3/2.0;
    const Real f43      =   4/3.0;
    const Real f16      =   1/6.0;
    const Real sqrt_1_3 =   sqrt(f13);
    const Cplx i        =   Cplx(0.0,1.0);

    /* exceptions */
#ifdef CBESSEL_EXCEPT
    const overflow_error of_err("Overflow");
    const underflow_error uf_err("Underflow");
    const invalid_argument ia_err("Undefined");
    const length_error cvg_err("Failed to converge");
#endif

    /**
     * This function computes the value of the modified
     * Bessel function of the first kind.
     *
     * @param v real order
     * @param z complex argument
     * @param scaled if true, the value is scaled by exp(-real(z))
     */
    Cplx I  (Real v,const Cplx &z,bool scaled=false);

    /**
     * This function computes the nth derivative of the modified
     * Bessel function of the first kind.
     *
     * @param v real order
     * @param z complex argument
     * @param n positive integer (the order of derivative)
     */
    Cplx Ip (Real v,const Cplx &z,int n=1);

    /**
     * This function computes the value of the
     * Bessel function of the first kind.
     *
     * @param v real order
     * @param z complex argument
     * @param scaled if true, the value is scaled by exp(-imag(z))
     */
    Cplx J  (Real v,const Cplx &z,bool scaled=false);

    /**
     * This function computes the nth derivative of the
     * Bessel function of the first kind.
     *
     * @param v real order
     * @param z complex argument
     * @param n positive integer (the order of derivative)
     */
    Cplx Jp (Real v,const Cplx &z,int n=1);

    /**
     * This function computes the value of the modified
     * Bessel function of the second kind.
     *
     * @param v real order
     * @param z complex argument
     * @param scaled if true, the value is scaled by exp(z)
     */
    Cplx K  (Real v,const Cplx &z,bool scaled=false);

    /**
     * This function computes the nth derivative of the modified
     * Bessel function of the second kind.
     *
     * @param v real order
     * @param z complex argument
     * @param n positive integer (the order of derivative)
     */
    Cplx Kp (Real v,const Cplx &z,int n=1);

    /**
     * This function computes the value of the
     * Bessel function of the second kind.
     *
     * @param v real order
     * @param z complex argument
     * @param scaled if true, the value is scaled by exp(-imag(z))
     */
    Cplx Y  (Real v,const Cplx &z,bool scaled=false);

    /**
     * This function computes the nth derivative of the
     * Bessel function of the second kind.
     *
     * @param v real order
     * @param z complex argument
     * @param n positive integer (the order of derivative)
     */
    Cplx Yp (Real v,const Cplx &z,int n=1);

    /**
     * This function computes the value of the
     * Hankel function of the first kind.
     *
     * @param v real order
     * @param z complex argument
     * @param scaled if true, the value is scaled by exp(-i*z)
     */
    Cplx H1 (Real v,const Cplx &z,bool scaled=false);
    // real input, vectorized
    template <int N>
    void H1_0(const Eigen::Array<Real,N,N> &x,Eigen::Array<Cplx,N,N> &h0,Eigen::Array<Real,N,N> *ws);
    template <int N>
    void H1_01(const Eigen::Array<Real,N,N> &x,Eigen::Array<Cplx,N,N> &h0,Eigen::Array<Cplx,N,N> &h1,Eigen::Array<Real,N,N> *ws);
    template <int N>
    void H1_01_i(const Eigen::Array<Real,N,N> &x,Eigen::Array<Cplx,N,N> &h0,Eigen::Array<Cplx,N,N> &h1,Eigen::Array<Real,N,N> *ws);
    template <int N>
    void H1_01_cplx(const Eigen::Array<Cplx,N,N> &x,Eigen::Array<Cplx,N,N> &h0,Eigen::Array<Cplx,N,N> &h1);

    /**
     * This function computes the nth derivative of the
     * Hankel function of the first kind.
     *
     * @param v real order
     * @param z complex argument
     * @param n positive integer (the order of derivative)
     */
    Cplx H1p(Real v,const Cplx &z,int n=1);

    /**
     * This function computes the value of the
     * Hankel function of the second kind.
     *
     * @param v real order
     * @param z complex argument
     * @param scaled if true, the value is scaled by exp(i*z)
     */
    Cplx H2 (Real v,const Cplx &z,bool scaled=false);

    /**
     * This function computes the nth derivative of the
     * Hankel function of the second kind.
     *
     * @param v real order
     * @param z complex argument
     * @param n positive integer (the order of derivative)
     */
    Cplx H2p(Real v,const Cplx &z,int n=1);

    /**
     * This function computes the value of the
     * Airy function of the first kind.
     *
     * @param z complex argument
     * @param scaled if true, the result is scaled by exp(2/3*z*sqrt(z))
     */
    Cplx Ai (const Cplx &z,bool scaled=false);

    /**
     * This function computes the first derivative of the
     * Airy function of the first kind.
     *
     * @param z complex argument
     * @param scaled if true, the result is scaled by exp(2/3*z*sqrt(z))
     */
    Cplx Aip(const Cplx &z,bool scaled=false);

    /**
     * This function computes the value of the
     * Airy function of the second kind.
     *
     * @param z complex argument
     * @param scaled if true, the result is scaled by exp(-abs(real(2/3*z*sqrt(z))))
     */
    Cplx Bi (const Cplx &z,bool scaled=false);

    /**
     * This function computes the first derivative of the
     * Airy function of the second kind.
     *
     * @param z complex argument
     * @param scaled if true, the result is scaled by exp(-abs(real(2/3*z*sqrt(z))))
     */
    Cplx Bip(const Cplx &z,bool scaled=false);

    /**
     * Vectorized computation of J0, J1, Y0, Y1, H0, H1
     */

    static Real JY01_ub = 12.5;
    static const Real
    invsqrtpi= 5.64189583547756279280e-01,
    tpi    =   6.36619772367581382433e-01,
    R0[6]  = { 0, 0,
               1.56249999999999947958e-02,-1.89979294238854721751e-04,1.82954049532700665670e-06,-4.61832688532103189199e-09 },
    S0[5]  = { 0,
               1.56191029464890010492e-02, 1.16926784663337450260e-04, 5.13546550207318111446e-07, 1.16614003333790000205e-09 },
    u0[7]  = {-7.38042951086872317523e-02, 1.76666452509181115538e-01,-1.38185671945596898896e-02, 3.47453432093683650238e-04,
              -3.81407053724364161125e-06, 1.95590137035022920206e-08,-3.98205194132103398453e-11 },
    v0[5]  = { 0,
               1.27304834834123699328e-02, 7.60068627350353253702e-05, 2.59150851840457805467e-07, 4.41110311332675467403e-10 },
    r0[4]  = {-6.25000000000000000000e-02, 1.40705666955189706048e-03,-1.59955631084035597520e-05, 4.96727999609584448412e-08 },
    s0[6]  = { 0,
               1.91537599538363460805e-02, 1.85946785588630915560e-04, 1.17718464042623683263e-06,
               5.04636257076217042715e-09, 1.23542274426137913908e-11 },
    pR8[6] = { 0.00000000000000000000e+00,-7.03124999999900357484e-02,-8.08167041275349795626e+00,
              -2.57063105679704847262e+02,-2.48521641009428822144e+03,-5.25304380490729545272e+03 },
    pS8[5] = { 1.16534364619668181717e+02, 3.83374475364121826715e+03, 4.05978572648472545552e+04,
               1.16752972564375915681e+05, 4.76277284146730962675e+04 },
    pR5[6] = {-1.14125464691894502584e-11,-7.03124940873599280078e-02,-4.15961064470587782438e+00,
              -6.76747652265167261021e+01,-3.31231299649172967747e+02,-3.46433388365604912451e+02 },
    pS5[5] = { 6.07539382692300335975e+01, 1.05125230595704579173e+03, 5.97897094333855784498e+03,
               9.62544514357774460223e+03, 2.40605815922939109441e+03 },
    pR3[6] = {-2.54704601771951915620e-09,-7.03119616381481654654e-02,-2.40903221549529611423e+00,
              -2.19659774734883086467e+01,-5.80791704701737572236e+01,-3.14479470594888503854e+01 },
    pS3[5] = { 3.58560338055209726349e+01, 3.61513983050303863820e+02, 1.19360783792111533330e+03,
               1.12799679856907414432e+03, 1.73580930813335754692e+02 },
    pR2[6] = {-8.87534333032526411254e-08,-7.03030995483624743247e-02,-1.45073846780952986357e+00,
              -7.63569613823527770791e+00,-1.11931668860356747786e+01,-3.23364579351335335033e+00 },
    pS2[5] = { 2.22202997532088808441e+01, 1.36206794218215208048e+02, 2.70470278658083486789e+02,
               1.53875394208320329881e+02, 1.46576176948256193810e+01 },
    qR8[6] = { 0.00000000000000000000e+00, 7.32421874999935051953e-02, 1.17682064682252693899e+01,
               5.57673380256401856059e+02, 8.85919720756468632317e+03, 3.70146267776887834771e+04 },
    qS8[6] = { 1.63776026895689824414e+02, 8.09834494656449805916e+03, 1.42538291419120476348e+05,
               8.03309257119514397345e+05, 8.40501579819060512818e+05, -3.43899293537866615225e+05 },
    qR5[6] = { 1.84085963594515531381e-11, 7.32421766612684765896e-02, 5.83563508962056953777e+00,
               1.35111577286449829671e+02, 1.02724376596164097464e+03, 1.98997785864605384631e+03 },
    qS5[6] = { 8.27766102236537761883e+01, 2.07781416421392987104e+03, 1.88472887785718085070e+04,
               5.67511122894947329769e+04, 3.59767538425114471465e+04,-5.35434275601944773371e+03 },
    qR3[6] = { 4.37741014089738620906e-09, 7.32411180042911447163e-02, 3.34423137516170720929e+00,
               4.26218440745412650017e+01, 1.70808091340565596283e+02, 1.66733948696651168575e+02 },
    qS3[6] = { 4.87588729724587182091e+01, 7.09689221056606015736e+02, 3.70414822620111362994e+03,
               6.46042516752568917582e+03, 2.51633368920368957333e+03,-1.49247451836156386662e+02 },
    qR2[6] = { 1.50444444886983272379e-07, 7.32234265963079278272e-02, 1.99819174093815998816e+00,
               1.44956029347885735348e+01, 3.16662317504781540833e+01, 1.62527075710929267416e+01 },
    qS2[6] = { 3.03655848355219184498e+01, 2.69348118608049844624e+02, 8.44783757595320139444e+02,
               8.82935845112488550512e+02, 2.12666388511798828631e+02,-5.31095493882666946917e+00 },
    U0[5]  = {-1.96057090646238940668e-01, 5.04438716639811282616e-02,-1.91256895875763547298e-03,
               2.35252600561610495928e-05,-9.19099158039878874504e-08 },
    V0[5]  = { 1.99167318236649903973e-02, 2.02552581025135171496e-04, 1.35608801097516229404e-06,
               6.22741452364621501295e-09, 1.66559246207992079114e-11 },
    pr8[6] = { 0.00000000000000000000e+00, 1.17187499999988647970e-01, 1.32394806593073575129e+01,
               4.12051854307378562225e+02, 3.87474538913960532227e+03, 7.91447954031891731574e+03 },
    ps8[5] = { 1.14207370375678408436e+02, 3.65093083420853463394e+03, 3.69562060269033463555e+04,
               9.76027935934950801311e+04, 3.08042720627888811578e+04 },
    pr5[6] = { 1.31990519556243522749e-11, 1.17187493190614097638e-01, 6.80275127868432871736e+00,
               1.08308182990189109773e+02, 5.17636139533199752805e+02, 5.28715201363337541807e+02 },
    ps5[5] = { 5.92805987221131331921e+01, 9.91401418733614377743e+02, 5.35326695291487976647e+03,
               7.84469031749551231769e+03, 1.50404688810361062679e+03 },
    pr3[6] = { 3.02503916137373618024e-09, 1.17186865567253592491e-01, 3.93297750033315640650e+00,
               3.51194035591636932736e+01, 9.10550110750781271918e+01, 4.85590685197364919645e+01 },
    ps3[5] = { 3.47913095001251519989e+01, 3.36762458747825746741e+02, 1.04687139975775130551e+03,
               8.90811346398256432622e+02, 1.03787932439639277504e+02 },
    pr2[6] = { 1.07710830106873743082e-07, 1.17176219462683348094e-01, 2.36851496667608785174e+00,
               1.22426109148261232917e+01, 1.76939711271687727390e+01, 5.07352312588818499250e+00 },
    ps2[5] = { 2.14364859363821409488e+01, 1.25290227168402751090e+02, 2.32276469057162813669e+02,
               1.17679373287147100768e+02, 8.36463893371618283368e+00 },
    qr8[6] = { 0.00000000000000000000e+00,-1.02539062499992714161e-01,-1.62717534544589987888e+01,
              -7.59601722513950107896e+02,-1.18498066702429587167e+04,-4.84385124285750353010e+04 },
    qs8[6] = { 1.61395369700722909556e+02, 7.82538599923348465381e+03, 1.33875336287249578163e+05,
               7.19657723683240939863e+05, 6.66601232617776375264e+05,-2.94490264303834643215e+05 },
    qr5[6] = {-2.08979931141764104297e-11,-1.02539050241375426231e-01,-8.05644828123936029840e+00,
              -1.83669607474888380239e+02,-1.37319376065508163265e+03,-2.61244440453215656817e+03 },
    qs5[6] = { 8.12765501384335777857e+01, 1.99179873460485964642e+03, 1.74684851924908907677e+04,
               4.98514270910352279316e+04, 2.79480751638918118260e+04,-4.71918354795128470869e+03 },
    qr3[6] = {-5.07831226461766561369e-09,-1.02537829820837089745e-01,-4.61011581139473403113e+00,
              -5.78472216562783643212e+01,-2.28244540737631695038e+02,-2.19210128478909325622e+02 },
    qs3[6] = { 4.76651550323729509273e+01, 6.73865112676699709482e+02, 3.38015286679526343505e+03,
               5.54772909720722782367e+03, 1.90311919338810798763e+03,-1.35201191444307340817e+02 },
    qr2[6] = {-1.78381727510958865572e-07,-1.02517042607985553460e-01,-2.75220568278187460720e+00,
              -1.96636162643703720221e+01,-4.23253133372830490089e+01,-2.13719211703704061733e+01 },
    qs2[6] = { 2.95333629060523854548e+01, 2.52981549982190529136e+02, 7.57502834868645436472e+02,
               7.39393205320467245656e+02, 1.55949003336666123687e+02,-4.95949898822628210127e+00 };

    /**
     * Compute j0(x), y0(x), j1(x) and y1(x) at the same time (faster).
     *
     * @param x real argument (x>0)
     */
    void JY_01(Real x,Real &J0,Real &Y0,Real &J1,Real &Y1);

    /**
     * Compute H^1_0(x) and H^1_1(x) at the same time (faster).
     *
     * @param x real argument (x>0)
     */
    void H1_01(Real x, Cplx &h0, Cplx &h1);

    template<int N>
    void Bessel_JY_01(const Eigen::Array<Real,N,N> &x,Eigen::Array<Real,N,N> &J0,
                      Eigen::Array<Real,N,N> &Y0,Eigen::Array<Real,N,N> &J1,Eigen::Array<Real,N,N> &Y1,Eigen::Array<Real,N,N> *ws) {
        Real mc=x.minCoeff();
        assert(mc>0);
        Eigen::Index max_i,max_j;
        x.maxCoeff(&max_i,&max_j);
        if (x(max_i,max_j) <= JY01_ub) {
            auto &x2_4=ws[0],&t=ws[1];
            x2_4=x.square()*0.25;
            t.setOnes();
            J0.setOnes();
            J1.setOnes();
            Y0.setZero();
            Y1.setZero();
            Real Hk=0,k=1.0,maxiter=CBESSEL_MAXITER;
            do {
                t*=-x2_4/(k*k);
                Hk+=1.0/k;
                J0+=t;
                Y0-=Hk*t;
                k+=1.0;
                J1+=t/k;
                Y1-=(Hk/k)*t;
            } while (Hk*std::abs(t(max_i,max_j))>eps && k<=maxiter);
            J1*=x*0.5;
            ws[0]=(x*0.5).log()-D[9];
            Y0+=ws[0]*J0;
            Y0*=M_2_PI;
            Y1*=x;
            Y1+=2.0*(ws[0]*J1+(J0-2.0)/x);
            Y1*=M_1_PI;
        } else {
            bool fast=mc>=8.;
            auto &xx=ws[0],&invxx=ws[1];
            xx=x*x;
            invxx=1./xx;
            auto &r=ws[2],&s=ws[4],&c=ws[3],&a1=ws[5],&a2=ws[6],&a3=ws[7],&a4=ws[8],&a5=ws[9],
                &u1=ws[10],&v1=ws[11],&u2=ws[12],&v2=ws[13];
            if (mc<2.)
                a5.setZero();
            r.setZero();
            if (fast)
                r=pR8[0]+invxx*(pR8[1]+invxx*(pR8[2]+invxx*(pR8[3]+invxx*(pR8[4]+invxx*pR8[5]))));
            else for (unsigned i=6;i-->0;) {
                a1.setConstant(pR8[i]); a2.setConstant(pR5[i]);
                if (mc>=4.5454) r=invxx*r+(x>=8.).select(a1,a2);
                else {
                    a3.setConstant(pR3[i]);
                    if (mc>=2.8571) r=invxx*r+(x>=8.).select(a1,(x>=4.5454).select(a2,a3));
                    else {
                        a4.setConstant(pR2[i]);
                        r=invxx*r+(x>=8.).select(a1,(x>=4.5454).select(a2,(x>=2.8571).select(a3,(x>=2).select(a4,a5))));
                    }
                }
            }
            s.setZero();
            if (fast)
                s=pS8[0]+invxx*(pS8[1]+invxx*(pS8[2]+invxx*(pS8[3]+invxx*pS8[4])));
            else for (unsigned i=5;i-->0;) {
                a1.setConstant(pS8[i]); a2.setConstant(pS5[i]);
                if (mc>=4.5454) s=invxx*s+(x>=8.).select(a1,a2);
                else {
                    a3.setConstant(pS3[i]);
                    if (mc>=2.8571) s=invxx*s+(x>=8.).select(a1,(x>=4.5454).select(a2,a3));
                    else {
                        a4.setConstant(pS2[i]);
                        s=invxx*s+(x>=8.).select(a1,(x>=4.5454).select(a2,(x>=2.8571).select(a3,(x>=2).select(a4,a5))));
                    }
                }
            }
            u1=1.+r/(1.+invxx*s);
            r.setZero();
            if (fast)
                r=qR8[0]+invxx*(qR8[1]+invxx*(qR8[2]+invxx*(qR8[3]+invxx*(qR8[4]+invxx*qR8[5]))));
            else for (unsigned i=6;i-->0;) {
                a1.setConstant(qR8[i]); a2.setConstant(qR5[i]);
                if (mc>=4.5454) r=invxx*r+(x>=8.).select(a1,a2);
                else {
                    a3.setConstant(qR3[i]);
                    if (mc>=2.8571) r=invxx*r+(x>=8.).select(a1,(x>=4.5454).select(a2,a3));
                    else {
                        a4.setConstant(qR2[i]);
                        r=invxx*r+(x>=8.).select(a1,(x>=4.5454).select(a2,(x>=2.8571).select(a3,(x>=2).select(a4,a5))));
                    }
                }
            }
            s.setZero();
            if (fast)
                s=qS8[0]+invxx*(qS8[1]+invxx*(qS8[2]+invxx*(qS8[3]+invxx*(qS8[4]+invxx*qS8[5]))));
            else for (unsigned i=6;i-->0;) {
                a1.setConstant(qS8[i]); a2.setConstant(qS5[i]);
                if (mc>=4.5454) s=invxx*s+(x>=8.).select(a1,a2);
                else {
                    a3.setConstant(qS3[i]);
                    if (mc>=2.8571) s=invxx*s+(x>=8.).select(a1,(x>=4.5454).select(a2,a3));
                    else {
                        a4.setConstant(qS2[i]);
                        s=invxx*s+(x>=8.).select(a1,(x>=4.5454).select(a2,(x>=2.8571).select(a3,(x>=2).select(a4,a5))));
                    }
                }
            }
            v1=(-.125+r/(1.+invxx*s))/x;
            r.setZero();
            if (fast)
                r=pr8[0]+invxx*(pr8[1]+invxx*(pr8[2]+invxx*(pr8[3]+invxx*(pr8[4]+invxx*pr8[5]))));
            else for (unsigned i=6;i-->0;) {
                a1.setConstant(pr8[i]); a2.setConstant(pr5[i]);
                if (mc>=4.5454) r=invxx*r+(x>=8.).select(a1,a2);
                else {
                    a3.setConstant(pr3[i]);
                    if (mc>=2.8571) r=invxx*r+(x>=8.).select(a1,(x>=4.5454).select(a2,a3));
                    else {
                        a4.setConstant(pr2[i]);
                        r=invxx*r+(x>=8.).select(a1,(x>=4.5454).select(a2,(x>=2.8571).select(a3,(x>=2).select(a4,a5))));
                    }
                }
            }
            s.setZero();
            if (fast)
                s=ps8[0]+invxx*(ps8[1]+invxx*(ps8[2]+invxx*(ps8[3]+invxx*ps8[4])));
            else for (unsigned i=5;i-->0;) {
                a1.setConstant(ps8[i]); a2.setConstant(ps5[i]);
                if (mc>=4.5454) s=invxx*s+(x>=8.).select(a1,a2);
                else {
                    a3.setConstant(ps3[i]);
                    if (mc>=2.8571) s=invxx*s+(x>=8.).select(a1,(x>=4.5454).select(a2,a3));
                    else {
                        a4.setConstant(ps2[i]);
                        s=invxx*s+(x>=8.).select(a1,(x>=4.5454).select(a2,(x>=2.8571).select(a3,(x>=2).select(a4,a5))));
                    }
                }
            }
            u2=1.+r/(1.+invxx*s);
            r.setZero();
            if (fast)
                r=qr8[0]+invxx*(qr8[1]+invxx*(qr8[2]+invxx*(qr8[3]+invxx*(qr8[4]+invxx*qr8[5]))));
            else for (unsigned i=6;i-->0;) {
                a1.setConstant(qr8[i]); a2.setConstant(qr5[i]);
                if (mc>=4.5454) r=invxx*r+(x>=8.).select(a1,a2);
                else {
                    a3.setConstant(qr3[i]);
                    if (mc>=2.8571) r=invxx*r+(x>=8.).select(a1,(x>=4.5454).select(a2,a3));
                    else {
                        a4.setConstant(qr2[i]);
                        r=invxx*r+(x>=8.).select(a1,(x>=4.5454).select(a2,(x>=2.8571).select(a3,(x>=2).select(a4,a5))));
                    }
                }
            }
            s.setZero();
            if (fast)
                s=qs8[0]+invxx*(qs8[1]+invxx*(qs8[2]+invxx*(qs8[3]+invxx*(qs8[4]+invxx*qs8[5]))));
            else for (unsigned i=6;i-->0;) {
                a1.setConstant(qs8[i]); a2.setConstant(qs5[i]);
                if (mc>=4.5454) s=invxx*s+(x>=8.).select(a1,a2);
                else {
                    a3.setConstant(qs3[i]);
                    if (mc>=2.8571) s=invxx*s+(x>=8.).select(a1,(x>=4.5454).select(a2,a3));
                    else {
                        a4.setConstant(qs2[i]);
                        s=invxx*s+(x>=8.).select(a1,(x>=4.5454).select(a2,(x>=2.8571).select(a3,(x>=2).select(a4,a5))));
                    }
                }
            }
            v2=(.375+r/(1.+invxx*s))/x;
            s=x.sin();
            r=x.cos();
            c=s+r;
            s-=r;
            r=-(x+x).cos();
            auto mask=s*c<0.;
            c=mask.select(c,r/s);
            s=mask.select(r/c,s);
            r=x.sqrt();
            J0=invsqrtpi*(u1*c-v1*s)/r;
            Y0=invsqrtpi*(u1*s+v1*c)/r;
            J1=invsqrtpi*(u2*s+v2*c)/r;
            Y1=invsqrtpi*(v2*s-u2*c)/r;
            if (mc<2.) {
                auto mask=x<2.;
                r.setZero();
                for (unsigned i=6;i-->2;) {
                    r=mask.select(xx*r+R0[i],a5);
                }
                s.setZero();
                for (unsigned i=5;i-->1;) {
                    s=mask.select(xx*s+S0[i],a5);
                }
                r*=xx/(1.+xx*s);
                J0=(x>=2).select(J0,1.+(r-0.25)*xx);
                r.setZero();
                for (unsigned i=7;i-->0;) {
                    r=mask.select(xx*r+u0[i],a5);
                }
                s.setZero();
                for (unsigned i=5;i-->1;) {
                    s=mask.select(xx*s+v0[i],a5);
                }
                r/=1.+xx*s;
                a2=x.log();
                Y0=(x>=2).select(Y0,r+tpi*J0*a2);
                r.setZero();
                for (unsigned i=4;i-->0;) {
                    r=mask.select(xx*r+r0[i],a5);
                }
                s.setZero();
                for (unsigned i=6;i-->1;) {
                    s=mask.select(xx*s+s0[i],a5);
                }
                r*=xx/(1.+xx*s);
                J1=(x>=2).select(J1,x*(.5+r));
                r.setZero();
                for (unsigned i=5;i-->0;) {
                    r=mask.select(xx*r+U0[i],a5);
                }
                s.setZero();
                for (unsigned i=5;i-->0;) {
                    s=mask.select(xx*s+V0[i],a5);
                }
                r/=1.+xx*s;
                Y1=(x>=2).select(Y1,x*r+tpi*(J1*a2-1./x));
            }
        }
    }

    /**
     * Compute H^1_0(x) and H^1_1(x) for real x (vectorized).
     *
     * @param x real argument
     * @param h0 computed values (need to be initialized to the size of x)
     * @param h1 computed values (need to be initialized to the size of x)
     * @param ws workspace ws[18] of matrices of the size of x
     */
    template<int N>
    void H1_01(const Eigen::Array<Real,N,N> &x,Eigen::Array<Cplx,N,N> &h0,Eigen::Array<Cplx,N,N> &h1,Eigen::Array<Real,N,N> *ws) {
        Bessel_JY_01<N>(x,ws[0],ws[1],ws[2],ws[3],ws+4);
        h0=ws[0]+1i*ws[1];
        h1=ws[2]+1i*ws[3];
    }

    /**
     * Compute i*H^1_0(x) and i*H^1_1(x) for real x (vectorized).
     *
     * @param x real argument
     * @param h0 computed values (need to be initialized to the size of x)
     * @param h1 computed values (need to be initialized to the size of x)
     * @param ws workspace ws[18] of matrices of the size of x
     */
    template<int N>
    void H1_01_i(const Eigen::Array<Real,N,N> &x,Eigen::Array<Cplx,N,N> &h0,Eigen::Array<Cplx,N,N> &h1,Eigen::Array<Real,N,N> *ws) {
        Bessel_JY_01<N>(x,ws[0],ws[1],ws[2],ws[3],ws+4);
        h0=-ws[1]+1i*ws[0];
        h1=-ws[3]+1i*ws[2];
    }

    /**
     * Compute H^1_0(x) and H^1_1(x) for complex x.
     *
     * @param x complex argument
     * @param h0 computed values (need to be initialized to the size of x)
     * @param h1 computed values (need to be initialized to the size of x)
     */
    template<int N>
    void H1_01_cplx(const Eigen::Array<Cplx,N,N> &x,Eigen::Array<Cplx,N,N> &h0,Eigen::Array<Cplx,N,N> &h1) {
        size_t nr=x.rows(),nc=x.cols();
        for (unsigned k=0; k<nc; ++k) {
            for (unsigned j=0; j<nr; ++j) {
                Cplx v=x(j,k);
                h0(j,k)=H1(0,v);
                h1(j,k)=H1(1,v);
            }
        }
    }
}

#endif // CBESSEL_HPP
